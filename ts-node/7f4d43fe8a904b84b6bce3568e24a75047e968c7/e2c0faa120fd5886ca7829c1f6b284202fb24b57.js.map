{"version":3,"file":"/home/app/tests/lib/lib.ts","sources":["/home/app/tests/lib/lib.ts"],"names":[],"mappings":";;AAAA,mDAAmD;AACnD,MAAM,YAAY,GAAQ,OAAO,CAAC,eAAe,CAAC,CAAC;AAGnD,iBAAwB,IAAS;IAE/B,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,CAAC,YAAY;QACtC,OAAO,CAAC,GAAG,CAAC,qBAAqB,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAC7C,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACrC,CAAC,CAAE,CAAC;AACN,CAAC;AAND,0BAMC;AAED;;;;GAIG;AACH,qBAA4B,MAAW;IAErC,MAAM,KAAK,GAAQ;QAEjB,MAAM,CAAC,MAAM;aACV,GAAG,CAAC,SAAS,CAAC;aACd,MAAM,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC,CAAC;IAEF,IAAI,SAAS,GAAG;QACd,OAAO,EAAE,GAAG;QACZ,MAAM,EAAE,CAAC;QACT,UAAU,EAAE,GAAG;KAChB,CAAC;IAEF,MAAM,CAAC,YAAY,CAAC,CAAC,KAAU,EAAE,QAAgB;QAE/C,EAAE,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;YACjB,OAAO,CAAC,GAAG,CAAC,+BAA+B,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;QAC9D,CAAC;QAED,MAAM,CAAC,KAAK,EAAE;aACX,KAAK,CAAC,KAAK,CAAC,CAAC;IAElB,CAAC,EAAE,SAAS,CAAC,CAAA;AACf,CAAC;AAzBD,kCAyBC","sourcesContent":["import * as supertest from \"supertest-as-promised\";\r\nconst promiseRetry: any = require(\"promise-retry\");\r\n\r\n\r\nexport function connect(opts: any): Promise<Object> {\r\n\r\n  return new Promise((resolve /*, reject*/) => {\r\n    console.log(`Connect to server ${opts.url}`);\r\n    resolve(supertest.agent(opts.url));\r\n  } );\r\n}\r\n\r\n/**\r\n * Pings the server until a 200 is returned at the endpoint `health`\r\n * @param server\r\n * @returns {*}\r\n */\r\nexport function healthCheck(server: any): Promise<void> {\r\n\r\n  const check: any = () => {\r\n\r\n    return server\r\n      .get(\"/health\")\r\n      .expect(200);\r\n  };\r\n\r\n  let retryOpts = {\r\n    retries: 200,\r\n    factor: 1,\r\n    minTimeout: 250\r\n  };\r\n\r\n  return promiseRetry((retry: any, attempts: number) => {\r\n\r\n    if (attempts > 1) {\r\n      console.log(`Health-check failed, retry (${attempts - 1})`);\r\n    }\r\n\r\n    return check()\r\n      .catch(retry);\r\n\r\n  }, retryOpts)\r\n}\r\n\r\n"]}