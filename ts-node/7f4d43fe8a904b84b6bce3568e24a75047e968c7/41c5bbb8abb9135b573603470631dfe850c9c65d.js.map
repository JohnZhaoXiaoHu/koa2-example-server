{"version":3,"file":"/home/app/src/server.ts","sources":["/home/app/src/server.ts"],"names":[],"mappings":";;AAAA,2BAA2B;AAE3B,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC9B,MAAM,UAAU,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC7C,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACrC,MAAM,YAAY,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAClD,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACrC,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACrC,MAAM,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAEzC,MAAM,YAAY,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAEhD,2CAA0C;AAC1C,qCAAqC;AAErC;IAQE;QALO,SAAI,GAAW,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;QAM7C,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;QAErB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,MAAM;QAEZ,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEO,cAAc;QACpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QACzB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;QACrB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;QACvB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;QAEvB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC;YACtB,OAAO,EAAE,CAAC,GAAU,EAAE,GAAgB;gBACpC,GAAG,CAAC,KAAK,CAAC,oCAAoC,EAAE,GAAG,CAAC,CAAC;YACvD,CAAC;SACF,CAAC,CAAC,CAAC;IACN,CAAC;IAED;;OAEG;IACK,UAAU;QAChB,IAAI,CAAC,UAAU,GAAG,IAAI,mBAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE3C,IAAI,CAAC,WAAW,GAAG,IAAI,oBAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE7C,2BAA2B;QAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAC7B,CAAC;IAED;;OAEG;IACI,KAAK;QACV,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IAC3C,CAAC;CAEF;AA1DD,wBA0DC","sourcesContent":["import * as Koa from 'koa';\r\n\r\nconst cors = require('kcors');\r\nconst bodyParser = require('koa-bodyparser');\r\nconst logger = require('koa-logger');\r\nconst responseTime = require('koa-response-time');\r\nconst helmet = require('koa-helmet');\r\nconst multer = require('koa-multer');\r\nconst compress = require('koa-compress');\r\n\r\nconst errorHandler = require('./error-handler');\r\n\r\nimport {UserRoutes} from './users/routes';\r\nimport {HealthRoute} from './health';\r\n\r\nexport class Server {\r\n\r\n  public app: Koa;\r\n  public PORT: number = process.env.PORT || 3000;\r\n\r\n  public userRoutes: UserRoutes;\r\n  public healthCheck: HealthRoute;\r\n\r\n  constructor() {\r\n    this.app = new Koa();\r\n\r\n    this.config();\r\n  }\r\n\r\n  /**\r\n   * Configure the express app.\r\n   */\r\n  private config(): void {\r\n\r\n    this.initMiddleware();\r\n\r\n    this.initRoutes();\r\n  }\r\n\r\n  private initMiddleware(): void {\r\n    this.app.use(compress());\r\n    this.app.use(cors());\r\n    this.app.use(responseTime());\r\n    this.app.use(logger());\r\n    this.app.use(helmet());\r\n\r\n    this.app.use(bodyParser({\r\n      onerror: (err: Error, ctx: Koa.Context) => {\r\n        ctx.throw('Error parsing the body information', 422);\r\n      }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Initialize routes and set default behaviors\r\n   */\r\n  private initRoutes(): void {\r\n    this.userRoutes = new UserRoutes(this.app);\r\n\r\n    this.healthCheck = new HealthRoute(this.app);\r\n\r\n    // Error Handler at the end\r\n    this.app.use(errorHandler);\r\n  }\r\n\r\n  /**\r\n   * Start the server\r\n   */\r\n  public start(): void {\r\n    this.app.listen(this.PORT);\r\n    console.log(`Listening on ${this.PORT}`);\r\n  }\r\n\r\n}\r\n"]}